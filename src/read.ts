import { tokenize } from './tokenizer';
import { ErrorParse } from './error';
import { GenotypeData } from './GenotypeData';

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface GenotypeReadingOptions {
    // Nothing for now
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const readGenotype = (content: string, options: GenotypeReadingOptions = {}): GenotypeData => {
    const STATE_COMMENTS = 0, STATE_DATA = 1;
    const rGenerated = /This data file generated by (.+) at: (.+)/;
    const rGrc = /.*We are using reference human assembly build ([1-9][0-9]*).*/;

    const iterator = tokenize(content);
    let state = STATE_COMMENTS;
    let lineNumber = 1;
    const data = [];
    let producer = null, date = null, grcBuildVersion = null;
    for (const line of iterator) {
        // For efficiency we check this condition first
        if (line[3] !== undefined) { // Data
            if (state === STATE_DATA) {
                const rsid = line[3], chromosome = line[4], position = parseInt(line[5]), genotype = line[6];
                data.push({
                    rsid, chromosome, position, genotype,
                });
            } else {
                throw new ErrorParse(`Expected to read a header before reading data at line ${lineNumber}`, lineNumber);
            }
        } else {
            const header = line[1], comment = line[2];
            if (state === STATE_COMMENTS) {
                if (comment !== undefined) {
                    if (lineNumber === 1) {
                        const generatedResult = rGenerated.exec(comment);
                        if (generatedResult !== null) {
                            producer = generatedResult[1];
                            date = new Date(generatedResult[2]).toISOString(); // Invalid dates will raise an exception
                        }
                    }
                    const grcResult = rGrc.exec(comment);
                    if (grcResult !== null) {
                        grcBuildVersion = parseInt(grcResult[1]);
                    }
                } else if (header !== undefined) {
                    state = STATE_DATA; // Next we should be reading data
                } else {
                    throw new Error(); // Shouldn't happen
                }
            } else {
                throw new ErrorParse(`Expected to read data and not a comment at line ${lineNumber}`, lineNumber);
            }
        }

        lineNumber++;
    }

    if (data.length === 0) {
        const actualLine = Math.max(lineNumber - 1, 1); // Special case if the file is empty
        throw new ErrorParse('The file does not appear to contain any data', actualLine);
    }

    return {
        lines: data,
        producer,
        date,
        grcBuildVersion,
    };
};
